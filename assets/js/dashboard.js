/**
 * Credit Card Analysis Dashboard
 * Author: Generated by Claude
 * Description: Interactive dashboard for credit card expense analysis
 */

// Dados embarcados para funcionar com file:// protocol
const EMBEDDED_DATA = {
  "summary": {
    "totalGasto": 8270.65,
    "totalTransacoes": 61,
    "ticketMedio": 135.50,
    "totalCategorias": 13,
    "periodo": "Junho/Julho 2025",
    "titular": "Marcelo Jose Amador Filho",
    "cartao": "C6 Carbon"
  },
  "categoryData": [
    { "name": "Supermercados / Mercearia / Padarias / Lojas de Conveniência", "value": 2031.99, "count": 13, "percentage": 24.6 },
    { "name": "Restaurante / Lanchonete / Bar", "value": 1824.57, "count": 16, "percentage": 22.1 },
    { "name": "Serviços pessoais", "value": 846.33, "count": 1, "percentage": 10.2 },
    { "name": "Serviços Profissionais", "value": 755.30, "count": 3, "percentage": 9.1 },
    { "name": "T&E", "value": 688.72, "count": 1, "percentage": 8.3 },
    { "name": "Especialidade varejo", "value": 536.68, "count": 3, "percentage": 6.5 },
    { "name": "Transporte", "value": 464.67, "count": 15, "percentage": 5.6 },
    { "name": "Assistência médica e odontológica", "value": 374.72, "count": 3, "percentage": 4.5 },
    { "name": "Elétrico", "value": 295.53, "count": 1, "percentage": 3.6 },
    { "name": "Relacionados a Automotivo", "value": 266.43, "count": 1, "percentage": 3.2 },
    { "name": "Marketing Direto", "value": 90.80, "count": 1, "percentage": 1.1 },
    { "name": "Empresa para empresa", "value": 61.96, "count": 1, "percentage": 0.7 },
    { "name": "Associação", "value": 32.95, "count": 2, "percentage": 0.4 }
  ],
  "detailedTransactions": {
    "Empresa para empresa": {
      "total": 61.96,
      "quantidade": 1,
      "mediaGasto": 61.96,
      "transacoes": [
        {"data": "27/07/2025", "descricao": "PG *ZE DELIVERY ZE DEL", "valor": 61.96, "parcela": "Única", "finalCartao": "2360"}
      ]
    },
    "Serviços pessoais": {
      "total": 846.33,
      "quantidade": 1,
      "mediaGasto": 846.33,
      "transacoes": [
        {"data": "17/06/2025", "descricao": "QUINTAU CLUB LTDA", "valor": 846.33, "parcela": "2/3", "finalCartao": "6397"}
      ]
    },
    "Supermercados / Mercearia / Padarias / Lojas de Conveniência": {
      "total": 2031.99,
      "quantidade": 13,
      "mediaGasto": 156.31,
      "transacoes": [
        {"data": "27/06/2025", "descricao": "DISTRIBUIDORA DE BEB", "valor": 1000, "parcela": "Única", "finalCartao": "6397"},
        {"data": "24/06/2025", "descricao": "DISTRIBUIDORA DE BEB", "valor": 200, "parcela": "Única", "finalCartao": "6397"},
        {"data": "26/06/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 199.61, "parcela": "Única", "finalCartao": "6397"},
        {"data": "04/07/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 193.59, "parcela": "Única", "finalCartao": "6397"},
        {"data": "12/07/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 142.22, "parcela": "Única", "finalCartao": "6397"},
        {"data": "20/07/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 134.73, "parcela": "Única", "finalCartao": "6397"},
        {"data": "16/07/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 68.41, "parcela": "Única", "finalCartao": "6397"},
        {"data": "28/06/2025", "descricao": "SUPERMERCADO GREGORIO", "valor": 41.98, "parcela": "Única", "finalCartao": "6397"},
        {"data": "28/06/2025", "descricao": "SUBADQ.*GOIANIA MAGAZI", "valor": 34.3, "parcela": "Única", "finalCartao": "6397"},
        {"data": "05/07/2025", "descricao": "SUBADQ.*GOIANIA MAGAZI", "valor": 17.15, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Restaurante / Lanchonete / Bar": {
      "total": 1824.57,
      "quantidade": 16,
      "mediaGasto": 114.04,
      "transacoes": [
        {"data": "28/06/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 181.87, "parcela": "Única", "finalCartao": "6397"},
        {"data": "01/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 181.12, "parcela": "Única", "finalCartao": "6397"},
        {"data": "02/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 180.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "03/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "04/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "08/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "09/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "10/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "11/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "15/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 173.62, "parcela": "Única", "finalCartao": "6397"},
        {"data": "16/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 55.84, "parcela": "Única", "finalCartao": "6397"},
        {"data": "17/07/2025", "descricao": "RESTAURANTE SABOR D CA", "valor": 9.84, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Transporte": {
      "total": 464.67,
      "quantidade": 15,
      "mediaGasto": 30.98,
      "transacoes": [
        {"data": "25/06/2025", "descricao": "UBER* TRIP", "valor": 50.72, "parcela": "Única", "finalCartao": "6397"},
        {"data": "19/07/2025", "descricao": "UBER* TRIP", "valor": 42.53, "parcela": "Única", "finalCartao": "6397"},
        {"data": "18/07/2025", "descricao": "UBER* TRIP", "valor": 41.84, "parcela": "Única", "finalCartao": "6397"},
        {"data": "17/07/2025", "descricao": "UBER* TRIP", "valor": 40.91, "parcela": "Única", "finalCartao": "6397"},
        {"data": "15/07/2025", "descricao": "UBER* TRIP", "valor": 36.74, "parcela": "Única", "finalCartao": "6397"},
        {"data": "09/07/2025", "descricao": "UBER* TRIP", "valor": 36.56, "parcela": "Única", "finalCartao": "6397"},
        {"data": "04/07/2025", "descricao": "UBER* TRIP", "valor": 33.87, "parcela": "Única", "finalCartao": "6397"},
        {"data": "11/07/2025", "descricao": "UBER* TRIP", "valor": 30.91, "parcela": "Única", "finalCartao": "6397"},
        {"data": "08/07/2025", "descricao": "UBER* TRIP", "valor": 29.21, "parcela": "Única", "finalCartao": "6397"},
        {"data": "12/07/2025", "descricao": "UBER* TRIP", "valor": 28.23, "parcela": "Única", "finalCartao": "6397"},
        {"data": "16/07/2025", "descricao": "UBER* TRIP", "valor": 28.12, "parcela": "Única", "finalCartao": "6397"},
        {"data": "10/07/2025", "descricao": "UBER* TRIP", "valor": 25.48, "parcela": "Única", "finalCartao": "6397"},
        {"data": "02/07/2025", "descricao": "UBER* TRIP", "valor": 24.36, "parcela": "Única", "finalCartao": "6397"},
        {"data": "28/06/2025", "descricao": "UBER* TRIP", "valor": 22.79, "parcela": "Única", "finalCartao": "6397"},
        {"data": "03/07/2025", "descricao": "UBER* TRIP", "valor": 13.4, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Serviços Profissionais": {
      "total": 755.3,
      "quantidade": 3,
      "mediaGasto": 251.77,
      "transacoes": [
        {"data": "22/07/2025", "descricao": "MP *SERVICO ADVOGADO", "valor": 445.3, "parcela": "Única", "finalCartao": "6397"},
        {"data": "05/07/2025", "descricao": "PAYPAL *UPWORK", "valor": 160, "parcela": "Única", "finalCartao": "6397"},
        {"data": "09/07/2025", "descricao": "PAYPAL *UPWORK", "valor": 150, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "T&E": {
      "total": 688.72,
      "quantidade": 1,
      "mediaGasto": 688.72,
      "transacoes": [
        {"data": "09/07/2025", "descricao": "DECOLAR.COM", "valor": 688.72, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Especialidade varejo": {
      "total": 536.68,
      "quantidade": 3,
      "mediaGasto": 178.89,
      "transacoes": [
        {"data": "15/07/2025", "descricao": "LOJA FISICA MAGALU", "valor": 234.9, "parcela": "Única", "finalCartao": "6397"},
        {"data": "05/07/2025", "descricao": "LOJA FISICA MAGALU", "valor": 234.9, "parcela": "Única", "finalCartao": "6397"},
        {"data": "11/07/2025", "descricao": "PG *LOJA ON LINE", "valor": 66.88, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Assistência médica e odontológica": {
      "total": 374.72,
      "quantidade": 3,
      "mediaGasto": 124.91,
      "transacoes": [
        {"data": "11/07/2025", "descricao": "MP *CONSULTORIO MEDICO", "valor": 300, "parcela": "Única", "finalCartao": "6397"},
        {"data": "08/07/2025", "descricao": "FARMACIA SAO LUCAS", "valor": 37.36, "parcela": "Única", "finalCartao": "6397"},
        {"data": "02/07/2025", "descricao": "FARMACIA SAO LUCAS", "valor": 37.36, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Elétrico": {
      "total": 295.53,
      "quantidade": 1,
      "mediaGasto": 295.53,
      "transacoes": [
        {"data": "15/07/2025", "descricao": "ENEL DISTRIBUICAO GO", "valor": 295.53, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Relacionados a Automotivo": {
      "total": 266.43,
      "quantidade": 1,
      "mediaGasto": 266.43,
      "transacoes": [
        {"data": "28/06/2025", "descricao": "POSTO BRASPETRO", "valor": 266.43, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Marketing Direto": {
      "total": 90.8,
      "quantidade": 1,
      "mediaGasto": 90.8,
      "transacoes": [
        {"data": "22/07/2025", "descricao": "MP *WOOCOMMERCE", "valor": 90.8, "parcela": "Única", "finalCartao": "6397"}
      ]
    },
    "Associação": {
      "total": 32.95,
      "quantidade": 2,
      "mediaGasto": 16.48,
      "transacoes": [
        {"data": "15/07/2025", "descricao": "PIX*FEDERACAO GOIANA", "valor": 16.95, "parcela": "Única", "finalCartao": "6397"},
        {"data": "15/07/2025", "descricao": "PIX*FEDERACAO GOIANA", "valor": 16, "parcela": "Única", "finalCartao": "6397"}
      ]
    }
  }
};

class CreditCardDashboard {
    constructor() {
        this.data = null;
        this.colors = [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
            '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#36A2EB',
            '#FFCE56', '#9966FF', '#FF9F40'
        ];
        this.pieChart = null;
        this.barChart = null;
    }

    /**
     * Initialize the dashboard
     */
    async init() {
        try {
            await this.loadData();
            this.updateSummary();
            this.createCharts();
            this.createCategoryDetails();
        } catch (error) {
            console.error('Error initializing dashboard:', error);
            this.showError('Erro ao carregar os dados.');
        }
    }

    /**
     * Load transaction data - try fetch first, fallback to embedded data
     */
    async loadData() {
        try {
            // Tentar carregar do arquivo JSON primeiro
            const response = await fetch('./data/transactions.json');
            if (response.ok) {
                this.data = await response.json();
                console.log('Dados carregados do arquivo JSON');
                return;
            }
        } catch (error) {
            console.log('Fetch falhou, usando dados embarcados:', error.message);
        }
        
        // Fallback para dados embarcados
        this.data = EMBEDDED_DATA;
        console.log('Usando dados embarcados');
        
        // Simular delay de carregamento para melhor UX
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    /**
     * Update summary cards with data
     */
    updateSummary() {
        if (!this.data) return;

        const { summary } = this.data;
        
        // Update summary cards
        const summaryCards = document.querySelectorAll('.summary-card .value');
        if (summaryCards.length >= 4) {
            summaryCards[0].textContent = `R$ ${summary.totalGasto.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`;
            summaryCards[1].textContent = summary.totalTransacoes;
            summaryCards[2].textContent = `R$ ${summary.ticketMedio.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`;
            summaryCards[3].textContent = summary.totalCategorias;
        }

        // Update header info
        const headerP = document.querySelector('.header p');
        if (headerP) {
            headerP.textContent = `${summary.cartao} - ${summary.titular}`;
        }
    }

    /**
     * Create pie and bar charts
     */
    createCharts() {
        if (!this.data) return;

        this.createPieChart();
        this.createBarChart();
    }

    /**
     * Create pie chart for expense categories
     */
    createPieChart() {
        const pieCtx = document.getElementById('pieChart');
        if (!pieCtx) return;

        const { categoryData } = this.data;

        this.pieChart = new Chart(pieCtx, {
            type: 'doughnut',
            data: {
                labels: categoryData.map(item => {
                    return item.name.length > 25 ? item.name.substring(0, 22) + '...' : item.name;
                }),
                datasets: [{
                    data: categoryData.map(item => item.value),
                    backgroundColor: this.colors,
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const value = context.parsed;
                                const percentage = ((value / this.data.summary.totalGasto) * 100).toFixed(1);
                                return `R$ ${value.toFixed(2)} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    /**
     * Create bar chart for top 10 categories
     */
    createBarChart() {
        const barCtx = document.getElementById('barChart');
        if (!barCtx) return;

        const { categoryData } = this.data;
        const top10Data = categoryData.slice(0, 10);
        
        this.barChart = new Chart(barCtx, {
            type: 'bar',
            data: {
                labels: top10Data.map(item => {
                    return item.name.length > 20 ? item.name.substring(0, 17) + '...' : item.name;
                }),
                datasets: [{
                    label: 'Valor (R$)',
                    data: top10Data.map(item => item.value),
                    backgroundColor: this.colors.slice(0, 10),
                    borderColor: this.colors.slice(0, 10),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                return `R$ ${context.parsed.y.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: (value) => {
                                return 'R$ ' + value.toFixed(0);
                            }
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    }
                }
            }
        });
    }

    /**
     * Create expandable category details section
     */
    createCategoryDetails() {
        if (!this.data) return;

        const { categoryData, detailedTransactions } = this.data;
        const detailsContainer = document.getElementById('categoryDetails');
        
        if (!detailsContainer) return;

        // Clear existing content
        detailsContainer.innerHTML = '';
        detailsContainer.classList.remove('loading');

        categoryData.forEach((category, index) => {
            // Create category item
            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'category-item';
            categoryDiv.setAttribute('data-category', category.name);
            
            const average = category.value / category.count;
            
            categoryDiv.innerHTML = `
                <div class="category-name">
                    ${category.name}
                    <span class="expand-icon">▶</span>
                </div>
                <div class="category-stats">
                    <div class="stat">
                        <div class="stat-label">Total</div>
                        <div class="stat-value currency">R$ ${category.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>
                    </div>
                    <div class="stat">
                        <div class="stat-label">Transações</div>
                        <div class="stat-value">${category.count}</div>
                    </div>
                    <div class="stat">
                        <div class="stat-label">Média</div>
                        <div class="stat-value currency">R$ ${average.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>
                    </div>
                    <div class="stat">
                        <div class="stat-label">% do Total</div>
                        <div class="stat-value percentage">${category.percentage}%</div>
                    </div>
                </div>
            `;

            // Create transaction details section
            const transactionDetails = document.createElement('div');
            transactionDetails.className = 'transaction-details';
            
            const transactions = detailedTransactions[category.name]?.transacoes || [];
            
            if (transactions.length > 0) {
                transactionDetails.innerHTML = this.createTransactionGrid(transactions);
            } else {
                transactionDetails.innerHTML = `
                    <div style="padding: 20px; text-align: center; color: #6c757d;">
                        Nenhuma transação detalhada disponível para esta categoria.
                    </div>
                `;
            }

            // Add click event listener
            categoryDiv.addEventListener('click', () => {
                this.toggleCategoryDetails(categoryDiv, transactionDetails);
            });
            
            detailsContainer.appendChild(categoryDiv);
            detailsContainer.appendChild(transactionDetails);
        });
    }

    /**
     * Create transaction grid HTML
     * @param {Array} transactions - Array of transaction objects
     * @returns {string} HTML string for transaction grid
     */
    createTransactionGrid(transactions) {
        const transactionRows = transactions.map(trans => `
            <div class="transaction-row">
                <div class="transaction-date">${trans.data}</div>
                <div class="transaction-description">${trans.descricao}</div>
                <div class="transaction-value">R$ ${trans.valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>
                <div class="transaction-installment">${trans.parcela}</div>
                <div class="transaction-card">****${trans.finalCartao}</div>
            </div>
        `).join('');

        return `
            <div class="transactions-grid">
                <div class="transaction-header">
                    <div>Data</div>
                    <div>Descrição</div>
                    <div>Valor</div>
                    <div>Parcela</div>
                    <div>Cartão</div>
                </div>
                ${transactionRows}
            </div>
        `;
    }

    /**
     * Toggle category details expansion
     * @param {HTMLElement} categoryDiv - Category item element
     * @param {HTMLElement} transactionDetails - Transaction details element
     */
    toggleCategoryDetails(categoryDiv, transactionDetails) {
        const icon = categoryDiv.querySelector('.expand-icon');
        const isExpanded = categoryDiv.classList.contains('expanded');
        
        if (isExpanded) {
            // Close
            categoryDiv.classList.remove('expanded');
            icon.classList.remove('expanded');
            transactionDetails.classList.remove('show');
        } else {
            // Open
            categoryDiv.classList.add('expanded');
            icon.classList.add('expanded');
            transactionDetails.classList.add('show');
        }
    }

    /**
     * Show error message
     * @param {string} message - Error message to display
     */
    showError(message) {
        const container = document.querySelector('.container');
        if (container) {
            container.innerHTML = `
                <div class="header">
                    <h1>❌ Erro</h1>
                    <p>${message}</p>
                </div>
                <div style="padding: 50px; text-align: center; color: #6c757d;">
                    <p>Mas não se preocupe! Os dados estão embarcados no código e funcionarão normalmente.</p>
                    <button onclick="location.reload()" style="margin-top: 20px; padding: 10px 20px; background: #667eea; color: white; border: none; border-radius: 5px; cursor: pointer;">
                        🔄 Tentar Novamente
                    </button>
                </div>
            `;
        }
    }

    /**
     * Refresh dashboard data
     */
    async refresh() {
        try {
            await this.loadData();
            this.updateSummary();
            
            // Destroy existing charts
            if (this.pieChart) {
                this.pieChart.destroy();
            }
            if (this.barChart) {
                this.barChart.destroy();
            }
            
            this.createCharts();
            this.createCategoryDetails();
        } catch (error) {
            console.error('Error refreshing dashboard:', error);
            this.showError('Erro ao atualizar os dados.');
        }
    }
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const dashboard = new CreditCardDashboard();
    dashboard.init();

    // Make dashboard available globally for debugging
    window.dashboard = dashboard;
});

// Add keyboard shortcuts
document.addEventListener('keydown', (event) => {
    // Press F5 or Ctrl+R to refresh
    if (event.key === 'F5' || (event.ctrlKey && event.key === 'r')) {
        event.preventDefault();
        if (window.dashboard) {
            window.dashboard.refresh();
        }
    }
});